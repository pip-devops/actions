name: GitHub action for pipeline microservice in Node.js

input:
  name:
    description: 'Name of microservice folder in monorepo'
    required: true

outputs:
  build_number: 
    description: "Build number"
    value: ${{ steps.build_info.outputs.build_number }}
  component_version: 
    description: "Component version"
    value: ${{ steps.build_info.outputs.component_version }}
  component_name: 
    description: "Component name"
    value: ${{ steps.build_info.outputs.component_name }}

runs:
  using: "composite"
  steps: 
  
    ############# Prepare #############

    - name: Remove other components
      run: |
         ls | grep -v ${{ inputs.name }} | xargs -I{} rm -rf /{} 
      shell: bash

    - name: Save build number and component version
      id: build_info
      run: |
        echo "##[set-output name=build_number;]$GITHUB_RUN_NUMBER"
        echo "##[set-output name=component_version;]$(jq -r '.version' ${{ inputs.name }}/package.json)"
        echo "##[set-output name=component_name;]$(jq -r '.name' ${{ inputs.name }}/component.json)"
      shell: bash
   
    - name: Retrieve shared build scripts
      run: |
        git clone git@github.com:nov-pocs/max-devops.git
        cp max-devops/script-cicd-ps/docker/publish.ps1 ${{ inputs.name }}/publish.ps1
        cp max-devops/script-cicd-ps/node/release.ps1 ${{ inputs.name }}/release.ps1
      shell: bash

    ############# Build and test #############
    
    - name: Build the component
      run: |
        cd ${{ inputs.name }}
        ./build.ps1
      shell: bash

    - name: Test the component
      run: |
        cd ${{ inputs.name }}
        ./test.ps1
      shell: bash

    ############# Release #############

    - name: Package runtime docker container
      run: |
        cd ${{ inputs.name }}
        ./package.ps1
      env:
        DOCKER_IP: 172.17.0.1
      shell: bash

    - name: Publish runtime docker container
      run: |
        cd ${{ inputs.name }}
        ./publish.ps1
      shell: bash

    - name: Release binary artifacts
      run: |
        cd ${{ inputs.name }}
        ./release.ps1
      shell: bash

    ############# Deploy #############

    - name: Deploy component into the Stage environment
      run: echo "Deploying to stage"
      shell: bash

    ############# Clear #############

    # - name: Clean temporary build artifacts
    #   if: ${{ always() }}
    #   run: |
    #    cd ${{ inputs.name }}
    #    ./clean.ps1
    #   shell: bash
    